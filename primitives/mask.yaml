---
primitive_name: "to_integral"
brief_description: "Forms an integral value from the most significant bits of every lane in a vector mask register."
parameters:
   - ctype: "typename Vec::mask_type"
     name: "vec_mask"
     description: "Vector mask register containing mask style data."
returns:
   ctype: "typename Vec::base_type"
   description: "Integral value representing the vector mask register."
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: "int64_t"
     lscpu_flags: ['avx512f']
     implementation: "return vec_mask; //mask is integral already."
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: "int64_t"
     lscpu_flags: [ 'avx' ]
     implementation: "return _mm256_movemask_pd( _mm256_castsi256_pd( vec_mask ) );"
#INTEL - SSE
   - target_extension: "sse"
     ctype: "int64_t"
     lscpu_flags: [ 'sse2' ]
     implementation: "return _mm_movemask_pd( _mm_castsi128_pd( vec_mask ) );"
#ARM - NEON
   - target_extension: "neon"
     ctype: "int64_t"
     lscpu_flags: [ 'neon' ]
     is_native: False
     implementation: "return ( ( vec_mask[ 1 ] >> 62 ) & 0b10 ) | ( vec_mask[ 0 ] >> 63 );"
...
---
primitive_name: "get_msb"
brief_description: "Retrieves the most significant bit of every element in a vector register and sets the corresponding bit in a base type."
parameters:
   - ctype: "typename Vec::register_type"
     name: "vec"
     description: "Vector mask register containing mask style data."
returns:
   ctype: "typename Vec::base_type"
   description: "Integral value representing the vector mask register."
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: "int64_t"
     lscpu_flags: ['avx512f', 'avx512dq']
     implementation: "return _mm512_movepi64_mask( vec );"
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: "int64_t"
     lscpu_flags: [ 'avx' ]
     implementation: "return _mm256_movemask_pd( _mm256_castsi256_pd( vec ) );"
#INTEL - SSE
   - target_extension: "sse"
     ctype: "int64_t"
     lscpu_flags: [ 'sse2' ]
     implementation: "return _mm_movemask_pd( _mm_castsi128_pd( vec ) );"
#ARM - NEON
   - target_extension: "neon"
     ctype: "int64_t"
     lscpu_flags: [ 'neon' ]
     is_native: False
     implementation: "return ( ( vec[ 1 ] >> 62 ) & 0b10 ) | ( vec[ 0 ] >> 63 );"
...
---
primitive_name: "to_vector"
brief_description: "Forms an vector register from an integral where all bits are set in a lane if the corresponding mask bit is set to 1."
parameters:
   - ctype: "typename Vec::mask_type"
     name: "mask"
     description: "Vector mask register containing mask style data."
returns:
   ctype: "typename Vec::register_type"
   description: "Integral value representing the vector mask register."
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: "int64_t"
     lscpu_flags: ['avx512f']
     implementation: "return _mm512_maskz_set1_epi64( mask, -1 );"
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: "int64_t"
     lscpu_flags: [ 'avx' ]
     implementation: "return mask; //mask is a vector already."
#INTEL - SSE
   - target_extension: "sse"
     ctype: "int64_t"
     lscpu_flags: [ 'sse2' ]
     implementation: "return mask; //mask is a vector already."
#ARM - NEON
   - target_extension: "neon"
     ctype: "int64_t"
     lscpu_flags: [ 'neon' ]
     implementation: "return vreinterpretq_s64_u64( mask ); //mask is a vector already."
...
---
primitive_name: "mask_reduce"
brief_description: "Masks out every non relevant bit."
parameters:
   - ctype: "typename Vec::base_type"
     name: "mask"
     description: "Integral value containing n (set) bits."
returns:
   ctype: "typename Vec::base_type"
   description: "Integral value with only relevant bits set (or not)."
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: "int64_t"
     lscpu_flags: ['avx512f']
     implementation: "return mask & 0xFF; //mask is integral already."
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: "int64_t"
     lscpu_flags: [ 'avx' ]
     implementation: "return mask & 0xF;"
#INTEL - SSE
   - target_extension: "sse"
     ctype: "int64_t"
     lscpu_flags: [ 'sse2' ]
     implementation: "return mask & 0x3;"
#ARM - NEON
   - target_extension: "neon"
     ctype: "int64_t"
     lscpu_flags: [ 'neon' ]
     implementation: "return mask & 0x3;"
...
---
primitive_name: "insert_delim_zero"
brief_description: "Inserts 0 into bitmask using provided mask."
parameters:
   - ctype: "typename Vec::mask_type"
     name: "data"
     description: "Data mask register (e.g., data=0b11001011)."
   - ctype: "typename Vec::mask_type"
     name: "mask"
     description: "Vector mask register containing mask which is used to insert 0 bits (e.g., mask=0b110011)"
returns:
   ctype: "typename Vec::mask_type"
   description: "Data mask with inserted 0 bits (e.g., 0010{from data}00{because mask is 0 }11{from data})."
definitions:
#INTEL - AVX512
   - target_extension: "avx512"
     ctype: "uin64_t"
     lscpu_flags: ['bmi2']
     implementation: "return _pdep64; //mask is integral already."
#INTEL - AVX2
   - target_extension: "avx2"
     ctype: "int64_t"
     lscpu_flags: [ 'avx' ]
     implementation: "return _mm256_movemask_pd( _mm256_castsi256_pd( vec_mask ) );"
#INTEL - SSE
   - target_extension: "sse"
     ctype: "int64_t"
     lscpu_flags: [ 'sse2' ]
     implementation: "return _mm_movemask_pd( _mm_castsi128_pd( vec_mask ) );"
#ARM - NEON
   - target_extension: "neon"
     ctype: "int64_t"
     lscpu_flags: [ 'neon' ]
     is_native: False
     implementation: "return ( ( vec_mask[ 1 ] >> 62 ) & 0b10 ) | ( vec_mask[ 0 ] >> 63 );"
...